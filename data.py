# data.py

# 1. Dictionary with all information, grouped by categories (Python syntax).
tarjetas_por_categoria = {
    "Programming and Algorithms": [
        { "termino": "Variable", "definicion": "A space in memory to store a changing value.", "sintaxis": "let x = 5;", "pseudocodigo": "Define x <- 5" },
        { "termino": "Constant", "definicion": "A fixed value that does not change during execution.", "sintaxis": "const PI = 3.14;", "pseudocodigo": "Constant PI <- 3.14" },
        { "termino": "Integer data type", "definicion": "A number without decimals.", "sintaxis": "int n = 10;", "pseudocodigo": "Define n as Integer" },
        { "termino": "Float data type", "definicion": "A number with a decimal part.", "sintaxis": "float f = 3.5;", "pseudocodigo": "Define f as Real" },
        { "termino": "String", "definicion": "A sequence of characters.", "sintaxis": "string s = \"hello\";", "pseudocodigo": "Define s as Text" },
        { "termino": "Boolean", "definicion": "A true or false value.", "sintaxis": "bool flag = true;", "pseudocodigo": "Define flag as Boolean" },
        { "termino": "If conditional", "definicion": "Executes code if a condition is true.", "sintaxis": "if (a > b) { ... }", "pseudocodigo": "If a > b Then ... EndIf" },
        { "termino": "If-else conditional", "definicion": "An alternative between two blocks depending on a condition.", "sintaxis": "if (c) { ... } else { ... }", "pseudocodigo": "If c Then ... Else ... EndIf" },
        { "termino": "Switch/case structure", "definicion": "Selects an action based on the value of an expression.", "sintaxis": "switch(x) { case 1: ...; break; }", "pseudocodigo": "According to x Do Case1: ...; Case2: ..." },
        { "termino": "For loop", "definicion": "Repeats instructions a specific number of times.", "sintaxis": "for (i=0; i<n; i++) { ... }", "pseudocodigo": "For i = 0 To n-1 Do ... EndFor" },
        { "termino": "While loop", "definicion": "Repeats instructions as long as a condition is met.", "sintaxis": "while (cond) { ... }", "pseudocodigo": "While cond Do ... EndWhile" },
        { "termino": "Do-while loop", "definicion": "Executes at least once and then repeats if the condition is true.", "sintaxis": "do { ... } while (cond);", "pseudocodigo": "Repeat ... Until Not cond" },
        { "termino": "Break", "definicion": "Interrupts the execution of a loop.", "sintaxis": "if (x==-1) break;", "pseudocodigo": "If x == -1 Then ExitLoop" },
        { "termino": "Continue", "definicion": "Skips to the next iteration of the loop.", "sintaxis": "if (x<0) continue;", "pseudocodigo": "If x < 0 Then Continue" },
        { "termino": "Function / Method", "definicion": "A reusable block of code that performs a task.", "sintaxis": "function sum(a,b) { return a+b; }", "pseudocodigo": "Function sum(a,b) Return a+b EndFunction" },
        { "termino": "Parameters and arguments", "definicion": "Input values for a function (parameters) and their actual values (arguments).", "sintaxis": "sum(2,3)  // arguments", "pseudocodigo": "Call sum(2,3)" },
        { "termino": "Return value", "definicion": "The result that a function returns.", "sintaxis": "return result;", "pseudocodigo": "Return result" },
        { "termino": "Recursion", "definicion": "A function that calls itself to solve a problem.", "sintaxis": "function fact(n) { if (n<=1) return 1; return n*fact(n-1); }", "pseudocodigo": "Function fact(n) If n<=1 Return 1 Else Return n * fact(n-1) EndFunction" },
        { "termino": "Array", "definicion": "An indexed collection of elements of the same type.", "sintaxis": "int a[5] = {1,2,3,4,5};", "pseudocodigo": "Array a size 5" },
        { "termino": "List", "definicion": "An ordered and dynamic collection of elements.", "sintaxis": "list = [1,2,3]", "pseudocodigo": "List <- [1,2,3]" },
        { "termino": "Stack", "definicion": "A LIFO (Last-In, First-Out) structure.", "sintaxis": "push(x); pop();", "pseudocodigo": "Push(x) / Pop()" },
        { "termino": "Queue", "definicion": "A FIFO (First-In, First-Out) structure.", "sintaxis": "enqueue(x); dequeue();", "pseudocodigo": "Enqueue(x) / Dequeue()" },
        { "termino": "Linked list", "definicion": "A dynamic structure where each element points to the next.", "sintaxis": "node.next = other;", "pseudocodigo": "node.next <- other" },
        { "termino": "Binary tree", "definicion": "A hierarchical structure with nodes, each having up to two children.", "sintaxis": "node.left, node.right", "pseudocodigo": "Visit node; Visit left child; Visit right child" },
        { "termino": "Graph", "definicion": "A set of nodes connected by edges.", "sintaxis": "adjList[node] = [v1, v2]", "pseudocodigo": "For each neighbor Do ..." },
        { "termino": "Linear search", "definicion": "Searches sequentially until the element is found.", "sintaxis": "for i in arr: if arr[i]==x: return i", "pseudocodigo": "For each element If element == x Return index EndFor" },
        { "termino": "Binary search", "definicion": "Searches in a sorted list by dividing the range in half.", "sintaxis": "while low<=high: mid=(low+high)//2", "pseudocodigo": "Initialize low, high; While low<=high Do mid=(low+high)/2; compare; adjust bounds" },
        { "termino": "Bubble sort", "definicion": "Repeatedly swaps adjacent elements.", "sintaxis": "for i for j if a[j]>a[j+1] swap", "pseudocodigo": "Repeat n times Swap unordered pairs" },
        { "termino": "Insertion sort", "definicion": "Builds the sorted list by inserting elements one by one.", "sintaxis": "for i in 1..n insert a[i]", "pseudocodigo": "For i from 2 to n Insert a[i] into sorted sublist" },
        { "termino": "Merge sort", "definicion": "A divide and conquer algorithm.", "sintaxis": "mergeSort(arr): split, merge", "pseudocodigo": "If size <=1 Return; divide; mergeSort(left); mergeSort(right); merge" },
        { "termino": "Time complexity O(n)", "definicion": "Linear time with respect to the input size.", "sintaxis": "Ex: for(i=0;i<n;i++)", "pseudocodigo": "" },
        { "termino": "Time complexity O(n log n)", "definicion": "Example: efficient sorting algorithms.", "sintaxis": "merge sort, quick sort", "pseudocodigo": "" },
        { "termino": "Hash table / HashMap", "definicion": "A key-value structure with average O(1) access time.", "sintaxis": "map['key'] = value", "pseudocodigo": "" }
    ],
    "Databases": [
        { "termino": "Database", "definicion": "A system for storing and organizing data.", "sintaxis": "CREATE DATABASE myDB;", "pseudocodigo": "" },
        { "termino": "Table", "definicion": "A data structure with rows and columns.", "sintaxis": "CREATE TABLE users(id INT, name VARCHAR(50));", "pseudocodigo": "" },
        { "termino": "Record / Row", "definicion": "An individual entry in a table.", "sintaxis": "INSERT INTO table VALUES (...);", "pseudocodigo": "" },
        { "termino": "Column", "definicion": "An attribute or field of a table.", "sintaxis": "name VARCHAR(50)", "pseudocodigo": "" },
        { "termino": "Primary key", "definicion": "A unique identifier for each record.", "sintaxis": "id INT PRIMARY KEY", "pseudocodigo": "" },
        { "termino": "Foreign key", "definicion": "A reference to a primary key in another table.", "sintaxis": "FOREIGN KEY (fk) REFERENCES other(id)", "pseudocodigo": "" },
        { "termino": "SELECT query", "definicion": "Retrieves data from the database.", "sintaxis": "SELECT col FROM table WHERE cond;", "pseudocodigo": "" },
        { "termino": "INSERT", "definicion": "Inserts records into a table.", "sintaxis": "INSERT INTO table(col) VALUES(val);", "pseudocodigo": "" },
        { "termino": "UPDATE", "definicion": "Updates existing records.", "sintaxis": "UPDATE table SET col = val WHERE cond;", "pseudocodigo": "" },
        { "termino": "DELETE", "definicion": "Deletes records.", "sintaxis": "DELETE FROM table WHERE cond;", "pseudocodigo": "" },
        { "termino": "JOIN (INNER JOIN)", "definicion": "Combines rows that meet a condition between tables.", "sintaxis": "SELECT * FROM a INNER JOIN b ON a.id=b.a_id;", "pseudocodigo": "" },
        { "termino": "LEFT JOIN", "definicion": "Includes all rows from the left table and matching rows from the right.", "sintaxis": "SELECT * FROM a LEFT JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "RIGHT JOIN", "definicion": "Includes all rows from the right table and matching rows from the left.", "sintaxis": "SELECT * FROM a RIGHT JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "FULL JOIN", "definicion": "Includes all rows from both tables, with NULL where there is no match.", "sintaxis": "SELECT * FROM a FULL JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "GROUP BY", "definicion": "Groups rows for aggregations.", "sintaxis": "SELECT col, COUNT(*) FROM table GROUP BY col;", "pseudocodigo": "" },
        { "termino": "HAVING", "definicion": "Filters groups (similar to WHERE but for aggregates).", "sintaxis": "SELECT ... GROUP BY ... HAVING COUNT(*)>1;", "pseudocodigo": "" },
        { "termino": "ORDER BY", "definicion": "Sorts the results.", "sintaxis": "SELECT * FROM table ORDER BY col DESC;", "pseudocodigo": "" },
        { "termino": "Index", "definicion": "A structure that speeds up queries.", "sintaxis": "CREATE INDEX idx ON table(col);", "pseudocodigo": "" },
        { "termino": "Transaction", "definicion": "A set of operations that are executed as a single unit.", "sintaxis": "BEGIN; ... COMMIT;", "pseudocodigo": "" },
        { "termino": "COMMIT / ROLLBACK", "definicion": "To confirm or undo a transaction.", "sintaxis": "COMMIT;", "pseudocodigo": "" },
        { "termino": "Normalization", "definicion": "The process of eliminating redundancy in schemas.", "sintaxis": "1NF, 2NF, 3NF", "pseudocodigo": "" },
        { "termino": "Stored procedure", "definicion": "A routine stored in the database.", "sintaxis": "CREATE PROCEDURE name AS BEGIN ... END;", "pseudocodigo": "" },
        { "termino": "Trigger", "definicion": "An automatic action in response to database events.", "sintaxis": "CREATE TRIGGER ... AFTER INSERT ...", "pseudocodigo": "" },
        { "termino": "View", "definicion": "A saved query as a virtual table.", "sintaxis": "CREATE VIEW v AS SELECT ...;", "pseudocodigo": "" },
        { "termino": "ACID", "definicion": "Properties of transactions: Atomicity, Consistency, Isolation, Durability.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Shard / Sharding", "definicion": "Horizontal partitioning of data for scalability.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Replication", "definicion": "Copying data between servers for availability.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Backup / Restore", "definicion": "Data backup and restoration.", "sintaxis": "pg_dump / psql", "pseudocodigo": "" },
        { "termino": "NoSQL", "definicion": "Non-relational databases (document, key-value, column).", "sintaxis": "db.collection.find()", "pseudocodigo": "" }
    ],
    "Web Development (Frontend and Backend)": [
        { "termino": "HTML", "definicion": "Markup language for structuring web pages.", "sintaxis": "<!DOCTYPE html><html>...</html>", "pseudocodigo": "" },
        { "termino": "CSS", "definicion": "Language for the visual style of web pages.", "sintaxis": "selector { property: value; }", "pseudocodigo": "" },
        { "termino": "JavaScript", "definicion": "Language for adding interactivity to the browser.", "sintaxis": "document.getElementById('id')", "pseudocodigo": "" },
        { "termino": "DOM", "definicion": "Object model that represents the structure of HTML.", "sintaxis": "document.querySelector('selector')", "pseudocodigo": "" },
        { "termino": "Responsive Design", "definicion": "Design that adapts to different screen sizes.", "sintaxis": "@media (max-width: 600px) { ... }", "pseudocodigo": "" },
        { "termino": "Bootstrap", "definicion": "CSS framework for rapid responsive design.", "sintaxis": "<div class='container'>...</div>", "pseudocodigo": "" },
        { "termino": "Fetch API / AJAX", "definicion": "Asynchronous calls to the server from the client.", "sintaxis": "fetch('/api').then(res=>res.json())", "pseudocodigo": "" },
        { "termino": "REST", "definicion": "Architectural style for APIs using HTTP.", "sintaxis": "GET /resources, POST /resources", "pseudocodigo": "" },
        { "termino": "GraphQL", "definicion": "Query language for APIs that requests exactly what is needed.", "sintaxis": "query { users { id name } }", "pseudocodigo": "" },
        { "termino": "HTTP (methods)", "definicion": "Standard actions: GET, POST, PUT, DELETE, etc.", "sintaxis": "GET /users", "pseudocodigo": "" },
        { "termino": "HTTP status codes", "definicion": "Standard responses: 200 OK, 404 Not Found, 500 Server Error.", "sintaxis": "return 404", "pseudocodigo": "" },
        { "termino": "Cookies", "definicion": "Small pieces of data stored in the browser by the server.", "sintaxis": "Set-Cookie: name=value", "pseudocodigo": "" },
        { "termino": "Session", "definicion": "User data stored on the server between requests.", "sintaxis": "session['user'] = id", "pseudocodigo": "" },
        { "termino": "JWT (JSON Web Token)", "definicion": "A signed token for stateless authentication.", "sintaxis": "Authorization: Bearer <token>", "pseudocodigo": "" },
        { "termino": "Authentication", "definicion": "Verifying a user's identity.", "sintaxis": "POST /login", "pseudocodigo": "" },
        { "termino": "Authorization", "definicion": "Controlling what an authenticated user can do.", "sintaxis": "if user.role == 'admin' then ...", "pseudocodigo": "" },
        { "termino": "CORS", "definicion": "A policy that controls cross-origin requests.", "sintaxis": "Access-Control-Allow-Origin: *", "pseudocodigo": "" },
        { "termino": "Middleware", "definicion": "Intermediate code that processes requests before the controller.", "sintaxis": "app.use(middleware)", "pseudocodigo": "" },
        { "termino": "Templating (e.g., Jinja, EJS)", "definicion": "Generating dynamic HTML on the server.", "sintaxis": "{{ variable }}", "pseudocodigo": "" },
        { "termino": "SPA (Single Page Application)", "definicion": "A web app that loads a single page and updates content dynamically.", "sintaxis": "React / Vue / Angular", "pseudocodigo": "" },
        { "termino": "CSR vs SSR", "definicion": "Client-side rendering vs Server-side rendering.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "CDN", "definicion": "A distribution network for serving static resources quickly.", "sintaxis": "https://cdn.example.com/lib.js", "pseudocodigo": "" },
        { "termino": "WebSocket", "definicion": "Real-time, two-way communication between client and server.", "sintaxis": "new WebSocket(url)", "pseudocodigo": "" },
        { "termino": "TLS / HTTPS", "definicion": "A security layer for encrypted web connections.", "sintaxis": "https://...", "pseudocodigo": "" },
        { "termino": "Accessibility (A11Y)", "definicion": "Best practices to make the web usable by everyone.", "sintaxis": "role='button' aria-label='...'", "pseudocodigo": "" },
        { "termino": "SEO (basic)", "definicion": "Optimization for search engines.", "sintaxis": "<meta name='description' content='...'>", "pseudocodigo": "" },
        { "termino": "PWA (Progressive Web App)", "definicion": "Web apps with native capabilities (offline, installable).", "sintaxis": "serviceWorker.register('/sw.js')", "pseudocodigo": "" },
        { "termino": "API RESTful versioning", "definicion": "Versioning endpoints for compatibility.", "sintaxis": "/api/v1/users", "pseudocodigo": "" },
        { "termino": "Rate limiting", "definicion": "Request limits to protect the API.", "sintaxis": "limit to N requests/min", "pseudocodigo": "" },
        { "termino": "Reverse proxy", "definicion": "A server that acts as an intermediary for requests to the backend (e.g., Nginx).", "sintaxis": "", "pseudocodigo": "" }
    ],
    "Version Control and Collaboration": [
        { "termino": "Git", "definicion": "A distributed version control system.", "sintaxis": "git init", "pseudocodigo": "" },
        { "termino": "Repository (repo)", "definicion": "A storage for the code and its history.", "sintaxis": "git clone url", "pseudocodigo": "" },
        { "termino": "Commit", "definicion": "A record of changes with a message.", "sintaxis": "git commit -m 'message'", "pseudocodigo": "" },
        { "termino": "Branch", "definicion": "An independent line of development.", "sintaxis": "git branch feature-x", "pseudocodigo": "" },
        { "termino": "Merge", "definicion": "To join changes from one branch to another.", "sintaxis": "git merge feature-x", "pseudocodigo": "" },
        { "termino": "Rebase", "definicion": "To reapply commits on top of another base.", "sintaxis": "git rebase main", "pseudocodigo": "" },
        { "termino": "Push", "definicion": "To send commits to the remote repository.", "sintaxis": "git push origin branch", "pseudocodigo": "" },
        { "termino": "Pull", "definicion": "To fetch and merge changes from the remote.", "sintaxis": "git pull", "pseudocodigo": "" },
        { "termino": "Fork", "definicion": "A separate copy of a repo (mainly on GitHub).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Pull Request / Merge Request", "definicion": "A proposal of changes for review and merging.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Conflict", "definicion": "Incompatible changes that must be resolved manually.", "sintaxis": "git merge ... (conflict)", "pseudocodigo": "" },
        { "termino": "Stash", "definicion": "To save temporary changes without committing them.", "sintaxis": "git stash", "pseudocodigo": "" },
        { "termino": "Checkout", "definicion": "To switch to another branch or review a commit.", "sintaxis": "git checkout branch", "pseudocodigo": "" },
        { "termino": "Tag", "definicion": "A marker for versions/releases.", "sintaxis": "git tag v1.0", "pseudocodigo": "" },
        { "termino": "Remote", "definicion": "Remote repositories (origin, upstream).", "sintaxis": "git remote -v", "pseudocodigo": "" },
        { "termino": "Git log", "definicion": "Commit history.", "sintaxis": "git log", "pseudocodigo": "" },
        { "termino": "Git diff", "definicion": "Shows differences between versions.", "sintaxis": "git diff", "pseudocodigo": "" },
        { "termino": "Cherry-pick", "definicion": "To apply a specific commit to another branch.", "sintaxis": "git cherry-pick <sha>", "pseudocodigo": "" },
        { "termino": "Revert", "definicion": "To create a new commit that undoes another.", "sintaxis": "git revert <sha>", "pseudocodigo": "" },
        { "termino": "Reset", "definicion": "To move HEAD and optionally the index/working tree.", "sintaxis": "git reset --hard <sha>", "pseudocodigo": "" },
        { "termino": ".gitignore", "definicion": "A file to exclude files from the repo.", "sintaxis": "node_modules/", "pseudocodigo": "" },
        { "termino": "Submodule", "definicion": "A repo nested inside another repo.", "sintaxis": "git submodule add url", "pseudocodigo": "" },
        { "termino": "CI / CD", "definicion": "Continuous Integration and Continuous Delivery/Deployment.", "sintaxis": "github actions / pipelines", "pseudocodigo": "" },
        { "termino": "Pipeline", "definicion": "An automated set of build/test/deploy steps.", "sintaxis": ".github/workflows/*.yml", "pseudocodigo": "" },
        { "termino": "Code review", "definicion": "Peer review of code for quality.", "sintaxis": "comments on PR", "pseudocodigo": "" },
        { "termino": "Issue tracking", "definicion": "Management of tasks and bugs (issues, tickets).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Branching strategy (GitFlow)", "definicion": "A convention for branches (feature, develop, release, hotfix).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Semantic versioning", "definicion": "A versioning system MAJOR.MINOR.PATCH.", "sintaxis": "v1.2.3", "pseudocodigo": "" },
        { "termino": "Code ownership", "definicion": "People responsible for areas of the code.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Merge commit", "definicion": "A commit that records the merging of branches.", "sintaxis": "", "pseudocodigo": "" }
    ],
    "Software Testing and Quality Assurance": [
        { "termino": "Unit test", "definicion": "A test that verifies the functionality of a single unit (function/module).", "sintaxis": "assert sum(2,3) == 5", "pseudocodigo": "" },
        { "termino": "Integration test", "definicion": "Verifies the interaction between several modules.", "sintaxis": "pytest tests/integration", "pseudocodigo": "" },
        { "termino": "Functional test", "definicion": "Validates that the system meets functional requirements.", "sintaxis": "selenium script", "pseudocodigo": "" },
        { "termino": "Regression test", "definicion": "Ensures that changes do not break existing functionalities.", "sintaxis": "complete test suite", "pseudocodigo": "" },
        { "termino": "Acceptance test", "definicion": "Final validation by the client/user.", "sintaxis": "UAT sessions", "pseudocodigo": "" },
        { "termino": "Smoke test", "definicion": "A quick test to validate that the app starts correctly.", "sintaxis": "smoke suite", "pseudocodigo": "" },
        { "termino": "Sanity test", "definicion": "A superficial check to see that a basic functionality works after changes.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "TDD (Test Driven Development)", "definicion": "Developing tests before the code.", "sintaxis": "Red-Green-Refactor", "pseudocodigo": "" },
        { "termino": "BDD (Behavior Driven Development)", "definicion": "Tests focused on behavior in natural language.", "sintaxis": "Given/When/Then", "pseudocodigo": "" },
        { "termino": "Mocking", "definicion": "Simulating dependencies in tests.", "sintaxis": "mock.object()", "pseudocodigo": "" },
        { "termino": "Coverage", "definicion": "Percentage of code covered by tests.", "sintaxis": "coverage run -m pytest", "pseudocodigo": "" },
        { "termino": "Load testing", "definicion": "Evaluating performance under expected load.", "sintaxis": "k6 run script.js", "pseudocodigo": "" },
        { "termino": "Stress testing", "definicion": "Evaluating behavior under extreme conditions.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Performance testing", "definicion": "Measuring speed, latency, and throughput.", "sintaxis": "ab -n 1000 -c 50", "pseudocodigo": "" },
        { "termino": "Security testing", "definicion": "Detecting vulnerabilities in the application.", "sintaxis": "zap scan", "pseudocodigo": "" },
        { "termino": "SAST", "definicion": "Static analysis of code to find vulnerabilities.", "sintaxis": "sonarqube analysis", "pseudocodigo": "" },
        { "termino": "DAST", "definicion": "Dynamic analysis against a running application.", "sintaxis": "zap active scan", "pseudocodigo": "" },
        { "termino": "Linting", "definicion": "Tools that detect style/bug issues (e.g., ESLint, Flake8).", "sintaxis": "eslint src/", "pseudocodigo": "" },
        { "termino": "Static analysis", "definicion": "Reviewing code without running the application.", "sintaxis": "sonar-scanner", "pseudocodigo": "" },
        { "termino": "Usability testing", "definicion": "Validating user experience and ease of use by real users.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Accessibility testing", "definicion": "Ensuring the app is usable by people with disabilities.", "sintaxis": "axe-core", "pseudocodigo": "" },
        { "termino": "CI (Continuous Integration)", "definicion": "Automating builds and tests when code is pushed.", "sintaxis": ".github/workflows/ci.yml", "pseudocodigo": "" },
        { "termino": "CD (Continuous Delivery/Deployment)", "definicion": "Automating deployment to environments.", "sintaxis": ".github/workflows/cd.yml", "pseudocodigo": "" },
        { "termino": "Test pipeline", "definicion": "An automated sequence of steps: build/test/deploy.", "sintaxis": "pipeline { stages { ... } }", "pseudocodigo": "" },
        { "termino": "Bug / Defect", "definicion": "Behavior that does not meet the requirements.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Severity vs Priority", "definicion": "Severity = technical impact; Priority = when to fix it.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Bug report", "definicion": "A document describing the failure and steps to reproduce it.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Triage", "definicion": "Classifying and prioritizing received bugs.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Defect life cycle", "definicion": "The states a bug goes through (new, open, fixed, closed).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Canary release", "definicion": "Deploying changes to a small percentage of users for validation.", "sintaxis": "", "pseudocodigo": "" }
    ]
}

# --- TRANSFORMATION ---
# 2. We create the flat list that your app.py expects, adding the category to each card.
# This is the variable that is actually imported in app.py.

tarjetas = []
for categoria, lista_de_tarjetas in tarjetas_por_categoria.items():
    for tarjeta in lista_de_tarjetas:
        tarjeta['categoria'] = categoria  # We add the "category" key to each dictionary.
        tarjetas.append(tarjeta)