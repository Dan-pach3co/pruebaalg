# data.py

# 1. Diccionario con toda la información, agrupada por categorías (sintaxis Python).
tarjetas_por_categoria = {
    "Programación y Algoritmos": [
        { "termino": "Variable", "definicion": "Espacio en memoria para almacenar un valor cambiante.", "sintaxis": "let x = 5;", "pseudocodigo": "Definir x <- 5" },
        { "termino": "Constante", "definicion": "Valor fijo que no cambia durante la ejecución.", "sintaxis": "const PI = 3.14;", "pseudocodigo": "Constante PI <- 3.14" },
        { "termino": "Tipo de dato entero", "definicion": "Número sin decimales.", "sintaxis": "int n = 10;", "pseudocodigo": "Definir n como Entero" },
        { "termino": "Tipo de dato flotante", "definicion": "Número con parte decimal.", "sintaxis": "float f = 3.5;", "pseudocodigo": "Definir f como Real" },
        { "termino": "Cadena (string)", "definicion": "Secuencia de caracteres.", "sintaxis": "string s = \"hola\";", "pseudocodigo": "Definir s como Texto" },
        { "termino": "Booleano", "definicion": "Valor verdadero o falso.", "sintaxis": "bool flag = true;", "pseudocodigo": "Definir flag como Booleano" },
        { "termino": "Condicional if", "definicion": "Ejecuta código si una condición es verdadera.", "sintaxis": "if (a > b) { ... }", "pseudocodigo": "Si a > b Entonces ... FinSi" },
        { "termino": "Condicional if-else", "definicion": "Alternativa entre dos bloques según condición.", "sintaxis": "if (c) { ... } else { ... }", "pseudocodigo": "Si c Entonces ... Sino ... FinSi" },
        { "termino": "Estructura switch/case", "definicion": "Selecciona una acción según el valor de una expresión.", "sintaxis": "switch(x) { case 1: ...; break; }", "pseudocodigo": "Segun x Hacer Caso1: ...; Caso2: ..." },
        { "termino": "Bucle for", "definicion": "Repite instrucciones un número determinado de veces.", "sintaxis": "for (i=0; i<n; i++) { ... }", "pseudocodigo": "Para i = 0 Hasta n-1 Hacer ... FinPara" },
        { "termino": "Bucle while", "definicion": "Repite instrucciones mientras se cumpla la condición.", "sintaxis": "while (cond) { ... }", "pseudocodigo": "Mientras cond Hacer ... FinMientras" },
        { "termino": "Bucle do-while", "definicion": "Ejecuta al menos una vez y luego repite si la condición es verdadera.", "sintaxis": "do { ... } while (cond);", "pseudocodigo": "Repetir ... Hasta Que No cond" },
        { "termino": "Break", "definicion": "Interrumpe la ejecución de un bucle.", "sintaxis": "if (x==-1) break;", "pseudocodigo": "Si x == -1 Entonces SalirBucle" },
        { "termino": "Continue", "definicion": "Salta a la siguiente iteración del bucle.", "sintaxis": "if (x<0) continue;", "pseudocodigo": "Si x < 0 Entonces Continuar" },
        { "termino": "Función / Método", "definicion": "Bloque reutilizable que realiza una tarea.", "sintaxis": "function suma(a,b) { return a+b; }", "pseudocodigo": "Funcion suma(a,b) Retornar a+b FinFuncion" },
        { "termino": "Parámetros y argumentos", "definicion": "Valores de entrada a una función (parámetros) y sus valores concretos (argumentos).", "sintaxis": "suma(2,3)  // argumentos", "pseudocodigo": "Llamar suma(2,3)" },
        { "termino": "Valor de retorno", "definicion": "Resultado que devuelve una función.", "sintaxis": "return resultado;", "pseudocodigo": "Retornar resultado" },
        { "termino": "Recursividad", "definicion": "Función que se llama a sí misma para resolver un problema.", "sintaxis": "function fact(n) { if (n<=1) return 1; return n*fact(n-1); }", "pseudocodigo": "Funcion fact(n) Si n<=1 Retornar 1 Sino Retornar n * fact(n-1) FinFuncion" },
        { "termino": "Array / Arreglo", "definicion": "Colección indexada de elementos del mismo tipo.", "sintaxis": "int a[5] = {1,2,3,4,5};", "pseudocodigo": "Arreglo a tamaño 5" },
        { "termino": "Lista", "definicion": "Colección ordenada y dinámica de elementos.", "sintaxis": "lista = [1,2,3]", "pseudocodigo": "Lista <- [1,2,3]" },
        { "termino": "Pila (Stack)", "definicion": "Estructura LIFO (último en entrar, primero en salir).", "sintaxis": "push(x); pop();", "pseudocodigo": "Push(x) / Pop()" },
        { "termino": "Cola (Queue)", "definicion": "Estructura FIFO (primero en entrar, primero en salir).", "sintaxis": "enqueue(x); dequeue();", "pseudocodigo": "Encolar(x) / Desencolar()" },
        { "termino": "Lista enlazada", "definicion": "Estructura dinámica donde cada elemento apunta al siguiente.", "sintaxis": "node.next = other;", "pseudocodigo": "node.siguiente <- otro" },
        { "termino": "Árbol binario", "definicion": "Estructura jerárquica con nodos y hasta dos hijos cada uno.", "sintaxis": "node.left, node.right", "pseudocodigo": "Visitar nodo; Visitar hijo izquierdo; Visitar hijo derecho" },
        { "termino": "Grafo", "definicion": "Conjunto de nodos conectados por aristas.", "sintaxis": "adjList[node] = [v1, v2]", "pseudocodigo": "Para cada vecino Hacer ..." },
        { "termino": "Búsqueda lineal", "definicion": "Buscar secuencialmente hasta encontrar el elemento.", "sintaxis": "for i in arr: if arr[i]==x: return i", "pseudocodigo": "Para cada elemento Si elemento == x Retornar índice FinPara" },
        { "termino": "Búsqueda binaria", "definicion": "Buscar en lista ordenada dividiendo el rango a la mitad.", "sintaxis": "while low<=high: mid=(low+high)//2", "pseudocodigo": "Inicializar low, high; Mientras low<=high Hacer mid=(low+high)/2; comparar; ajustar bounds" },
        { "termino": "Ordenamiento por burbuja", "definicion": "Intercambia elementos adyacentes repetidamente.", "sintaxis": "for i for j if a[j]>a[j+1] swap", "pseudocodigo": "Repetir n veces Intercambiar pares desordenados" },
        { "termino": "Ordenamiento por inserción", "definicion": "Construye la lista ordenada insertando elementos uno a uno.", "sintaxis": "for i in 1..n insert a[i]", "pseudocodigo": "Para i desde 2 hasta n Insertar a[i] en sublista ordenada" },
        { "termino": "Ordenamiento por mezcla (merge sort)", "definicion": "Divide y combina (divide & conquer).", "sintaxis": "mergeSort(arr): split, merge", "pseudocodigo": "Si tamaño <=1 Retornar; dividir; mergeSort(left); mergeSort(right); mezclar" },
        { "termino": "Complejidad temporal O(n)", "definicion": "Tiempo lineal respecto al tamaño del input.", "sintaxis": "Ej: for(i=0;i<n;i++)", "pseudocodigo": "" },
        { "termino": "Complejidad temporal O(n log n)", "definicion": "Ejemplo: algoritmos de ordenamiento eficientes.", "sintaxis": "merge sort, quick sort", "pseudocodigo": "" },
        { "termino": "Tabla hash / HashMap", "definicion": "Estructura clave→valor con acceso promedio O(1).", "sintaxis": "map['clave'] = valor", "pseudocodigo": "" }
    ],
    "Bases de Datos": [
        { "termino": "Base de datos", "definicion": "Sistema para almacenar y organizar datos.", "sintaxis": "CREATE DATABASE miDB;", "pseudocodigo": "" },
        { "termino": "Tabla", "definicion": "Estructura de datos en filas y columnas.", "sintaxis": "CREATE TABLE usuarios(id INT, nombre VARCHAR(50));", "pseudocodigo": "" },
        { "termino": "Registro / Fila", "definicion": "Entrada individual en una tabla.", "sintaxis": "INSERT INTO tabla VALUES (...);", "pseudocodigo": "" },
        { "termino": "Columna", "definicion": "Atributo o campo de una tabla.", "sintaxis": "nombre VARCHAR(50)", "pseudocodigo": "" },
        { "termino": "Clave primaria", "definicion": "Identificador único de cada registro.", "sintaxis": "id INT PRIMARY KEY", "pseudocodigo": "" },
        { "termino": "Clave foránea", "definicion": "Referencia a una clave primaria de otra tabla.", "sintaxis": "FOREIGN KEY (fk) REFERENCES otra(id)", "pseudocodigo": "" },
        { "termino": "Consulta SELECT", "definicion": "Recupera datos de la base.", "sintaxis": "SELECT col FROM tabla WHERE cond;", "pseudocodigo": "" },
        { "termino": "INSERT", "definicion": "Inserta registros en una tabla.", "sintaxis": "INSERT INTO tabla(col) VALUES(val);", "pseudocodigo": "" },
        { "termino": "UPDATE", "definicion": "Actualiza registros existentes.", "sintaxis": "UPDATE tabla SET col = val WHERE cond;", "pseudocodigo": "" },
        { "termino": "DELETE", "definicion": "Elimina registros.", "sintaxis": "DELETE FROM tabla WHERE cond;", "pseudocodigo": "" },
        { "termino": "JOIN (INNER JOIN)", "definicion": "Combina filas que cumplen condición entre tablas.", "sintaxis": "SELECT * FROM a INNER JOIN b ON a.id=b.a_id;", "pseudocodigo": "" },
        { "termino": "LEFT JOIN", "definicion": "Incluye todas las filas de la izquierda y coincidencias de la derecha.", "sintaxis": "SELECT * FROM a LEFT JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "RIGHT JOIN", "definicion": "Incluye todas las filas de la derecha y coincidencias de la izquierda.", "sintaxis": "SELECT * FROM a RIGHT JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "FULL JOIN", "definicion": "Incluye filas de ambas tablas, con NULL donde no hay coincidencia.", "sintaxis": "SELECT * FROM a FULL JOIN b ON ...;", "pseudocodigo": "" },
        { "termino": "GROUP BY", "definicion": "Agrupa filas para agregaciones.", "sintaxis": "SELECT col, COUNT(*) FROM tabla GROUP BY col;", "pseudocodigo": "" },
        { "termino": "HAVING", "definicion": "Filtra grupos (similar a WHERE pero para agregados).", "sintaxis": "SELECT ... GROUP BY ... HAVING COUNT(*)>1;", "pseudocodigo": "" },
        { "termino": "ORDER BY", "definicion": "Ordena resultados.", "sintaxis": "SELECT * FROM tabla ORDER BY col DESC;", "pseudocodigo": "" },
        { "termino": "Índice", "definicion": "Estructura que acelera las consultas.", "sintaxis": "CREATE INDEX idx ON tabla(col);", "pseudocodigo": "" },
        { "termino": "Transacción", "definicion": "Conjunto de operaciones que se ejecutan como unidad.", "sintaxis": "BEGIN; ... COMMIT;", "pseudocodigo": "" },
        { "termino": "COMMIT / ROLLBACK", "definicion": "Confirmar o deshacer una transacción.", "sintaxis": "COMMIT;", "pseudocodigo": "" },
        { "termino": "Normalización", "definicion": "Proceso para eliminar redundancia en esquemas.", "sintaxis": "1NF, 2NF, 3NF", "pseudocodigo": "" },
        { "termino": "Procedimiento almacenado", "definicion": "Rutina almacenada en la BD.", "sintaxis": "CREATE PROCEDURE nombre AS BEGIN ... END;", "pseudocodigo": "" },
        { "termino": "Trigger", "definicion": "Acción automática ante eventos en la base.", "sintaxis": "CREATE TRIGGER ... AFTER INSERT ...", "pseudocodigo": "" },
        { "termino": "Vista (VIEW)", "definicion": "Consulta guardada como tabla virtual.", "sintaxis": "CREATE VIEW v AS SELECT ...;", "pseudocodigo": "" },
        { "termino": "ACID", "definicion": "Propiedades de transacciones: Atomicidad, Consistencia, Aislamiento, Durabilidad.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Shard / Sharding", "definicion": "Particionamiento horizontal de datos para escalabilidad.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Replicación", "definicion": "Copiar datos entre servidores para disponibilidad.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Backup / Restore", "definicion": "Copia de seguridad y restauración de datos.", "sintaxis": "pg_dump / psql", "pseudocodigo": "" },
        { "termino": "NoSQL", "definicion": "Bases de datos no relacionales (documento, clave-valor, columna).", "sintaxis": "db.collection.find()", "pseudocodigo": "" }
    ],
    "Desarrollo Web (Frontend y Backend)": [
        { "termino": "HTML", "definicion": "Lenguaje de marcado para estructurar páginas web.", "sintaxis": "<!DOCTYPE html><html>...</html>", "pseudocodigo": "" },
        { "termino": "CSS", "definicion": "Lenguaje para el estilo visual de páginas web.", "sintaxis": "selector { propiedad: valor; }", "pseudocodigo": "" },
        { "termino": "JavaScript", "definicion": "Lenguaje para añadir interactividad al navegador.", "sintaxis": "document.getElementById('id')", "pseudocodigo": "" },
        { "termino": "DOM", "definicion": "Modelo de objetos que representa la estructura del HTML.", "sintaxis": "document.querySelector('selector')", "pseudocodigo": "" },
        { "termino": "Responsive Design", "definicion": "Diseño que se adapta a distintos tamaños de pantalla.", "sintaxis": "@media (max-width: 600px) { ... }", "pseudocodigo": "" },
        { "termino": "Bootstrap", "definicion": "Framework CSS para diseño responsive rápido.", "sintaxis": "<div class='container'>...</div>", "pseudocodigo": "" },
        { "termino": "Fetch API / AJAX", "definicion": "Llamadas asíncronas al servidor desde el cliente.", "sintaxis": "fetch('/api').then(res=>res.json())", "pseudocodigo": "" },
        { "termino": "REST", "definicion": "Estilo arquitectónico para APIs usando HTTP.", "sintaxis": "GET /recursos, POST /recursos", "pseudocodigo": "" },
        { "termino": "GraphQL", "definicion": "Lenguaje de consultas para APIs que pide exactamente lo que se necesita.", "sintaxis": "query { users { id name } }", "pseudocodigo": "" },
        { "termino": "HTTP (métodos)", "definicion": "Acciones estándar: GET, POST, PUT, DELETE, etc.", "sintaxis": "GET /users", "pseudocodigo": "" },
        { "termino": "Códigos de estado HTTP", "definicion": "Respuestas estándar: 200 OK, 404 Not Found, 500 Server Error.", "sintaxis": "return 404", "pseudocodigo": "" },
        { "termino": "Cookies", "definicion": "Pequeños datos almacenados en el navegador por el servidor.", "sintaxis": "Set-Cookie: name=value", "pseudocodigo": "" },
        { "termino": "Session", "definicion": "Datos de usuario almacenados en el servidor entre peticiones.", "sintaxis": "session['user'] = id", "pseudocodigo": "" },
        { "termino": "JWT (JSON Web Token)", "definicion": "Token firmado para autenticación sin estado.", "sintaxis": "Authorization: Bearer <token>", "pseudocodigo": "" },
        { "termino": "Autenticación", "definicion": "Verificar identidad de un usuario.", "sintaxis": "POST /login", "pseudocodigo": "" },
        { "termino": "Autorización", "definicion": "Controlar qué puede hacer un usuario autenticado.", "sintaxis": "if user.role == 'admin' then ...", "pseudocodigo": "" },
        { "termino": "CORS", "definicion": "Política que controla solicitudes cross-origin.", "sintaxis": "Access-Control-Allow-Origin: *", "pseudocodigo": "" },
        { "termino": "Middleware", "definicion": "Código intermedio que procesa peticiones antes del controlador.", "sintaxis": "app.use(middleware)", "pseudocodigo": "" },
        { "termino": "Templating (ej. Jinja, EJS)", "definicion": "Generar HTML dinámico en el servidor.", "sintaxis": "{{ variable }}", "pseudocodigo": "" },
        { "termino": "SPA (Single Page Application)", "definicion": "Aplicación web que carga una sola página y actualiza contenido dinámicamente.", "sintaxis": "React / Vue / Angular", "pseudocodigo": "" },
        { "termino": "CSR vs SSR", "definicion": "Client-side rendering vs Server-side rendering.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "CDN", "definicion": "Red de distribución para servir recursos estáticos rápido.", "sintaxis": "https://cdn.example.com/lib.js", "pseudocodigo": "" },
        { "termino": "WebSocket", "definicion": "Comunicación bidireccional en tiempo real cliente-servidor.", "sintaxis": "new WebSocket(url)", "pseudocodigo": "" },
        { "termino": "TLS / HTTPS", "definicion": "Capa de seguridad para conexiones web cifradas.", "sintaxis": "https://...", "pseudocodigo": "" },
        { "termino": "Accesibilidad (A11Y)", "definicion": "Buenas prácticas para que la web sea usable por todos.", "sintaxis": "role='button' aria-label='...'", "pseudocodigo": "" },
        { "termino": "SEO (básico)", "definicion": "Optimización para buscadores.", "sintaxis": "<meta name='description' content='...'>", "pseudocodigo": "" },
        { "termino": "PWA (Progressive Web App)", "definicion": "Apps web con capacidades nativas (offline, installable).", "sintaxis": "serviceWorker.register('/sw.js')", "pseudocodigo": "" },
        { "termino": "API RESTful versioning", "definicion": "Versionar endpoints para compatibilidad.", "sintaxis": "/api/v1/usuarios", "pseudocodigo": "" },
        { "termino": "Rate limiting", "definicion": "Límites de peticiones para proteger la API.", "sintaxis": "limitar a N requests/min", "pseudocodigo": "" },
        { "termino": "Reverse proxy", "definicion": "Servidor que hace de intermediario para peticiones al backend (ej. Nginx).", "sintaxis": "", "pseudocodigo": "" }
    ],
    "Control de Versiones y Colaboración": [
        { "termino": "Git", "definicion": "Sistema de control de versiones distribuido.", "sintaxis": "git init", "pseudocodigo": "" },
        { "termino": "Repositorio (repo)", "definicion": "Almacén del código y su historial.", "sintaxis": "git clone url", "pseudocodigo": "" },
        { "termino": "Commit", "definicion": "Registro de cambios con mensaje.", "sintaxis": "git commit -m 'mensaje'", "pseudocodigo": "" },
        { "termino": "Branch (rama)", "definicion": "Línea de desarrollo independiente.", "sintaxis": "git branch feature-x", "pseudocodigo": "" },
        { "termino": "Merge", "definicion": "Unir cambios de una rama a otra.", "sintaxis": "git merge feature-x", "pseudocodigo": "" },
        { "termino": "Rebase", "definicion": "Reaplicar commits sobre otra base.", "sintaxis": "git rebase main", "pseudocodigo": "" },
        { "termino": "Push", "definicion": "Enviar commits al repositorio remoto.", "sintaxis": "git push origin branch", "pseudocodigo": "" },
        { "termino": "Pull", "definicion": "Traer y fusionar cambios del remoto.", "sintaxis": "git pull", "pseudocodigo": "" },
        { "termino": "Fork", "definicion": "Copia separada de un repo (principalmente en GitHub).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Pull Request / Merge Request", "definicion": "Propuesta de cambios para revisión y fusión.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Conflict", "definicion": "Cambios incompatibles que deben resolverse manualmente.", "sintaxis": "git merge ... (conflict)", "pseudocodigo": "" },
        { "termino": "Stash", "definicion": "Guardar cambios temporales sin cometerlos.", "sintaxis": "git stash", "pseudocodigo": "" },
        { "termino": "Checkout", "definicion": "Cambiar a otra rama o revisar un commit.", "sintaxis": "git checkout branch", "pseudocodigo": "" },
        { "termino": "Tag", "definicion": "Marcador para versiones/release.", "sintaxis": "git tag v1.0", "pseudocodigo": "" },
        { "termino": "Remote", "definicion": "Repositorios remotos (origin, upstream).", "sintaxis": "git remote -v", "pseudocodigo": "" },
        { "termino": "Git log", "definicion": "Historial de commits.", "sintaxis": "git log", "pseudocodigo": "" },
        { "termino": "Git diff", "definicion": "Muestra diferencias entre versiones.", "sintaxis": "git diff", "pseudocodigo": "" },
        { "termino": "Cherry-pick", "definicion": "Aplicar un commit específico en otra rama.", "sintaxis": "git cherry-pick <sha>", "pseudocodigo": "" },
        { "termino": "Revert", "definicion": "Crear un nuevo commit que deshace otro.", "sintaxis": "git revert <sha>", "pseudocodigo": "" },
        { "termino": "Reset", "definicion": "Mover HEAD y opcionalmente el índice/working tree.", "sintaxis": "git reset --hard <sha>", "pseudocodigo": "" },
        { "termino": ".gitignore", "definicion": "Archivo para excluir ficheros del repo.", "sintaxis": "node_modules/", "pseudocodigo": "" },
        { "termino": "Submodule", "definicion": "Repo anidado dentro de otro repo.", "sintaxis": "git submodule add url", "pseudocodigo": "" },
        { "termino": "CI / CD", "definicion": "Integración continua y entrega/despliegue continuo.", "sintaxis": "github actions / pipelines", "pseudocodigo": "" },
        { "termino": "Pipeline", "definicion": "Conjunto de pasos automáticos de build/test/deploy.", "sintaxis": ".github/workflows/*.yml", "pseudocodigo": "" },
        { "termino": "Code review", "definicion": "Revisión de código entre compañeros para calidad.", "sintaxis": "comentarios en PR", "pseudocodigo": "" },
        { "termino": "Issue tracking", "definicion": "Gestión de tareas y bugs (issues, tickets).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Branching strategy (GitFlow)", "definicion": "Convención para ramas (feature, develop, release, hotfix).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Semantic versioning", "definicion": "Sistema de versionado MAJOR.MINOR.PATCH.", "sintaxis": "v1.2.3", "pseudocodigo": "" },
        { "termino": "Code ownership", "definicion": "Responsables de áreas del código.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Merge commit", "definicion": "Commit que registra la unión de ramas.", "sintaxis": "", "pseudocodigo": "" }
    ],
    "Pruebas y Calidad de Software": [
        { "termino": "Prueba unitaria", "definicion": "Test que verifica el funcionamiento de una unidad (función/módulo).", "sintaxis": "assert suma(2,3) == 5", "pseudocodigo": "" },
        { "termino": "Prueba de integración", "definicion": "Verifica la interacción entre varios módulos.", "sintaxis": "pytest tests/integration", "pseudocodigo": "" },
        { "termino": "Prueba funcional", "definicion": "Valida que el sistema cumpla requisitos funcionales.", "sintaxis": "selenium script", "pseudocodigo": "" },
        { "termino": "Prueba de regresión", "definicion": "Asegura que cambios no rompan funcionalidades existentes.", "sintaxis": "test suite complete", "pseudocodigo": "" },
        { "termino": "Prueba de aceptación", "definicion": "Validación final por el cliente/usuario.", "sintaxis": "UAT sessions", "pseudocodigo": "" },
        { "termino": "Smoke test", "definicion": "Prueba rápida para validar que la app inicia correctamente.", "sintaxis": "smoke suite", "pseudocodigo": "" },
        { "termino": "Sanity test", "definicion": "Chequeo superficial para ver que una funcionalidad básica funciona después de cambios.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "TDD (Test Driven Development)", "definicion": "Desarrollar tests antes del código.", "sintaxis": "Red-Green-Refactor", "pseudocodigo": "" },
        { "termino": "BDD (Behavior Driven Development)", "definicion": "Tests centrados en comportamiento en lenguaje natural.", "sintaxis": "Given/When/Then", "pseudocodigo": "" },
        { "termino": "Mocking", "definicion": "Simular dependencias en tests.", "sintaxis": "mock.object()", "pseudocodigo": "" },
        { "termino": "Coverage (cobertura)", "definicion": "Porcentaje de código cubierto por tests.", "sintaxis": "coverage run -m pytest", "pseudocodigo": "" },
        { "termino": "Pruebas de carga", "definicion": "Evaluar rendimiento bajo carga esperada.", "sintaxis": "k6 run script.js", "pseudocodigo": "" },
        { "termino": "Pruebas de estrés", "definicion": "Evaluar comportamiento bajo condiciones extremas.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Pruebas de rendimiento", "definicion": "Medir velocidad, latencia y throughput.", "sintaxis": "ab -n 1000 -c 50", "pseudocodigo": "" },
        { "termino": "Pruebas de seguridad", "definicion": "Detectar vulnerabilidades en la aplicación.", "sintaxis": "zap scan", "pseudocodigo": "" },
        { "termino": "SAST", "definicion": "Análisis estático de código para encontrar vulnerabilidades.", "sintaxis": "sonarqube analysis", "pseudocodigo": "" },
        { "termino": "DAST", "definicion": "Análisis dinámico contra aplicación en ejecución.", "sintaxis": "zap active scan", "pseudocodigo": "" },
        { "termino": "Linting", "definicion": "Herramientas que detectan problemas de estilo/bugs (ej. ESLint, Flake8).", "sintaxis": "eslint src/", "pseudocodigo": "" },
        { "termino": "Análisis estático", "definicion": "Revisión del código sin ejecutar la aplicación.", "sintaxis": "sonar-scanner", "pseudocodigo": "" },
        { "termino": "Pruebas de usabilidad", "definicion": "Validar experiencia y facilidad de uso por usuarios reales.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Pruebas de accesibilidad", "definicion": "Aseguran que la app sea usable por personas con discapacidades.", "sintaxis": "axe-core", "pseudocodigo": "" },
        { "termino": "CI (Integración continua)", "definicion": "Automatizar build y tests al subir código.", "sintaxis": ".github/workflows/ci.yml", "pseudocodigo": "" },
        { "termino": "CD (Entrega/Despliegue continuo)", "definicion": "Automatizar despliegue a entornos.", "sintaxis": ".github/workflows/cd.yml", "pseudocodigo": "" },
        { "termino": "Pipeline de pruebas", "definicion": "Secuencia automatizada de steps: build/test/deploy.", "sintaxis": "pipeline { stages { ... } }", "pseudocodigo": "" },
        { "termino": "Bug / Defecto", "definicion": "Comportamiento que no cumple los requisitos.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Severidad vs Prioridad", "definicion": "Severidad = impacto técnico; Prioridad = cuándo arreglarlo.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Reporte de bug", "definicion": "Documento que describe el fallo y pasos para reproducirlo.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Triage", "definicion": "Clasificar y priorizar bugs recibidos.", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Defect life cycle", "definicion": "Estados por los que pasa un bug (new, open, fixed, closed).", "sintaxis": "", "pseudocodigo": "" },
        { "termino": "Canary release", "definicion": "Desplegar cambios a un pequeño porcentaje de usuarios para validar.", "sintaxis": "", "pseudocodigo": "" }
    ]
}

# --- TRANSFORMACIÓN ---
# 2. Creamos la lista plana que tu app.py espera, añadiendo la categoría a cada tarjeta.
# Esta es la variable que realmente se importa en app.py.

tarjetas = []
for categoria, lista_de_tarjetas in tarjetas_por_categoria.items():
    for tarjeta in lista_de_tarjetas:
        tarjeta['categoria'] = categoria  # Añadimos la clave "categoria" a cada diccionario.
        tarjetas.append(tarjeta)