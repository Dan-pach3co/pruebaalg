# data.py

# 1. Dictionary with all information, grouped by categories (Python syntax).
tarjetas_por_categoria = {
    "Programming and Algorithms": [
        { "term": "Variable", "definition": "A space in memory to store a changing value.", "syntax": "let x = 5;", "pseudocode": "Define x <- 5" },
        { "term": "Constant", "definition": "A fixed value that does not change during execution.", "syntax": "const PI = 3.14;", "pseudocode": "Constant PI <- 3.14" },
        { "term": "Integer data type", "definition": "A number without decimals.", "syntax": "int n = 10;", "pseudocode": "Define n as Integer" },
        { "term": "Float data type", "definition": "A number with a decimal part.", "syntax": "float f = 3.5;", "pseudocode": "Define f as Real" },
        { "term": "String", "definition": "A sequence of characters.", "syntax": "string s = \"hello\";", "pseudocode": "Define s as Text" },
        { "term": "Boolean", "definition": "A true or false value.", "syntax": "bool flag = true;", "pseudocode": "Define flag as Boolean" },
        { "term": "If conditional", "definition": "Executes code if a condition is true.", "syntax": "if (a > b) { ... }", "pseudocode": "If a > b Then ... EndIf" },
        { "term": "If-else conditional", "definition": "An alternative between two blocks depending on a condition.", "syntax": "if (c) { ... } else { ... }", "pseudocode": "If c Then ... Else ... EndIf" },
        { "term": "Switch/case structure", "definition": "Selects an action based on the value of an expression.", "syntax": "switch(x) { case 1: ...; break; }", "pseudocode": "According to x Do Case1: ...; Case2: ..." },
        { "term": "For loop", "definition": "Repeats instructions a specific number of times.", "syntax": "for (i=0; i<n; i++) { ... }", "pseudocode": "For i = 0 To n-1 Do ... EndFor" },
        { "term": "While loop", "definition": "Repeats instructions as long as a condition is met.", "syntax": "while (cond) { ... }", "pseudocode": "While cond Do ... EndWhile" },
        { "term": "Do-while loop", "definition": "Executes at least once and then repeats if the condition is true.", "syntax": "do { ... } while (cond);", "pseudocode": "Repeat ... Until Not cond" },
        { "term": "Break", "definition": "Interrupts the execution of a loop.", "syntax": "if (x==-1) break;", "pseudocode": "If x == -1 Then ExitLoop" },
        { "term": "Continue", "definition": "Skips to the next iteration of the loop.", "syntax": "if (x<0) continue;", "pseudocode": "If x < 0 Then Continue" },
        { "term": "Function / Method", "definition": "A reusable block of code that performs a task.", "syntax": "function sum(a,b) { return a+b; }", "pseudocode": "Function sum(a,b) Return a+b EndFunction" },
        { "term": "Parameters and arguments", "definition": "Input values for a function (parameters) and their actual values (arguments).", "syntax": "sum(2,3)  // arguments", "pseudocode": "Call sum(2,3)" },
        { "term": "Return value", "definition": "The result that a function returns.", "syntax": "return result;", "pseudocode": "Return result" },
        { "term": "Recursion", "definition": "A function that calls itself to solve a problem.", "syntax": "function fact(n) { if (n<=1) return 1; return n*fact(n-1); }", "pseudocode": "Function fact(n) If n<=1 Return 1 Else Return n * fact(n-1) EndFunction" },
        { "term": "Array", "definition": "An indexed collection of elements of the same type.", "syntax": "int a[5] = {1,2,3,4,5};", "pseudocode": "Array a size 5" },
        { "term": "List", "definition": "An ordered and dynamic collection of elements.", "syntax": "list = [1,2,3]", "pseudocode": "List <- [1,2,3]" },
        { "term": "Stack", "definition": "A LIFO (Last-In, First-Out) structure.", "syntax": "push(x); pop();", "pseudocode": "Push(x) / Pop()" },
        { "term": "Queue", "definition": "A FIFO (First-In, First-Out) structure.", "syntax": "enqueue(x); dequeue();", "pseudocode": "Enqueue(x) / Dequeue()" },
        { "term": "Linked list", "definition": "A dynamic structure where each element points to the next.", "syntax": "node.next = other;", "pseudocode": "node.next <- other" },
        { "term": "Binary tree", "definition": "A hierarchical structure with nodes, each having up to two children.", "syntax": "node.left, node.right", "pseudocode": "Visit node; Visit left child; Visit right child" },
        { "term": "Graph", "definition": "A set of nodes connected by edges.", "syntax": "adjList[node] = [v1, v2]", "pseudocode": "For each neighbor Do ..." },
        { "term": "Linear search", "definition": "Searches sequentially until the element is found.", "syntax": "for i in arr: if arr[i]==x: return i", "pseudocode": "For each element If element == x Return index EndFor" },
        { "term": "Binary search", "definition": "Searches in a sorted list by dividing the range in half.", "syntax": "while low<=high: mid=(low+high)//2", "pseudocode": "Initialize low, high; While low<=high Do mid=(low+high)/2; compare; adjust bounds" },
        { "term": "Bubble sort", "definition": "Repeatedly swaps adjacent elements.", "syntax": "for i for j if a[j]>a[j+1] swap", "pseudocode": "Repeat n times Swap unordered pairs" },
        { "term": "Insertion sort", "definition": "Builds the sorted list by inserting elements one by one.", "syntax": "for i in 1..n insert a[i]", "pseudocode": "For i from 2 to n Insert a[i] into sorted sublist" },
        { "term": "Merge sort", "definition": "A divide and conquer algorithm.", "syntax": "mergeSort(arr): split, merge", "pseudocode": "If size <=1 Return; divide; mergeSort(left); mergeSort(right); merge" },
        { "term": "Time complexity O(n)", "definition": "Linear time with respect to the input size.", "syntax": "Ex: for(i=0;i<n;i++)", "pseudocode": "" },
        { "term": "Time complexity O(n log n)", "definition": "Example: efficient sorting algorithms.", "syntax": "merge sort, quick sort", "pseudocode": "" },
        { "term": "Hash table / HashMap", "definition": "A key-value structure with average O(1) access time.", "syntax": "map['key'] = value", "pseudocode": "" }
    ],
    "Databases": [
        { "term": "Database", "definition": "A system for storing and organizing data.", "syntax": "CREATE DATABASE myDB;", "pseudocode": "" },
        { "term": "Table", "definition": "A data structure with rows and columns.", "syntax": "CREATE TABLE users(id INT, name VARCHAR(50));", "pseudocode": "" },
        { "term": "Record / Row", "definition": "An individual entry in a table.", "syntax": "INSERT INTO table VALUES (...);", "pseudocode": "" },
        { "term": "Column", "definition": "An attribute or field of a table.", "syntax": "name VARCHAR(50)", "pseudocode": "" },
        { "term": "Primary key", "definition": "A unique identifier for each record.", "syntax": "id INT PRIMARY KEY", "pseudocode": "" },
        { "term": "Foreign key", "definition": "A reference to a primary key in another table.", "syntax": "FOREIGN KEY (fk) REFERENCES other(id)", "pseudocode": "" },
        { "term": "SELECT query", "definition": "Retrieves data from the database.", "syntax": "SELECT col FROM table WHERE cond;", "pseudocode": "" },
        { "term": "INSERT", "definition": "Inserts records into a table.", "syntax": "INSERT INTO table(col) VALUES(val);", "pseudocode": "" },
        { "term": "UPDATE", "definition": "Updates existing records.", "syntax": "UPDATE table SET col = val WHERE cond;", "pseudocode": "" },
        { "term": "DELETE", "definition": "Deletes records.", "syntax": "DELETE FROM table WHERE cond;", "pseudocode": "" },
        { "term": "JOIN (INNER JOIN)", "definition": "Combines rows that meet a condition between tables.", "syntax": "SELECT * FROM a INNER JOIN b ON a.id=b.a_id;", "pseudocode": "" },
        { "term": "LEFT JOIN", "definition": "Includes all rows from the left table and matching rows from the right.", "syntax": "SELECT * FROM a LEFT JOIN b ON ...;", "pseudocode": "" },
        { "term": "RIGHT JOIN", "definition": "Includes all rows from the right table and matching rows from the left.", "syntax": "SELECT * FROM a RIGHT JOIN b ON ...;", "pseudocode": "" },
        { "term": "FULL JOIN", "definition": "Includes all rows from both tables, with NULL where there is no match.", "syntax": "SELECT * FROM a FULL JOIN b ON ...;", "pseudocode": "" },
        { "term": "GROUP BY", "definition": "Groups rows for aggregations.", "syntax": "SELECT col, COUNT(*) FROM table GROUP BY col;", "pseudocode": "" },
        { "term": "HAVING", "definition": "Filters groups (similar to WHERE but for aggregates).", "syntax": "SELECT ... GROUP BY ... HAVING COUNT(*)>1;", "pseudocode": "" },
        { "term": "ORDER BY", "definition": "Sorts the results.", "syntax": "SELECT * FROM table ORDER BY col DESC;", "pseudocode": "" },
        { "term": "Index", "definition": "A structure that speeds up queries.", "syntax": "CREATE INDEX idx ON table(col);", "pseudocode": "" },
        { "term": "Transaction", "definition": "A set of operations that are executed as a single unit.", "syntax": "BEGIN; ... COMMIT;", "pseudocode": "" },
        { "term": "COMMIT / ROLLBACK", "definition": "To confirm or undo a transaction.", "syntax": "COMMIT;", "pseudocode": "" },
        { "term": "Normalization", "definition": "The process of eliminating redundancy in schemas.", "syntax": "1NF, 2NF, 3NF", "pseudocode": "" },
        { "term": "Stored procedure", "definition": "A routine stored in the database.", "syntax": "CREATE PROCEDURE name AS BEGIN ... END;", "pseudocode": "" },
        { "term": "Trigger", "definition": "An automatic action in response to database events.", "syntax": "CREATE TRIGGER ... AFTER INSERT ...", "pseudocode": "" },
        { "term": "View", "definition": "A saved query as a virtual table.", "syntax": "CREATE VIEW v AS SELECT ...;", "pseudocode": "" },
        { "term": "ACID", "definition": "Properties of transactions: Atomicity, Consistency, Isolation, Durability.", "syntax": "", "pseudocode": "" },
        { "term": "Shard / Sharding", "definition": "Horizontal partitioning of data for scalability.", "syntax": "", "pseudocode": "" },
        { "term": "Replication", "definition": "Copying data between servers for availability.", "syntax": "", "pseudocode": "" },
        { "term": "Backup / Restore", "definition": "Data backup and restoration.", "syntax": "pg_dump / psql", "pseudocode": "" },
        { "term": "NoSQL", "definition": "Non-relational databases (document, key-value, column).", "syntax": "db.collection.find()", "pseudocode": "" }
    ],
    "Web Development (Frontend and Backend)": [
        { "term": "HTML", "definition": "Markup language for structuring web pages.", "syntax": "<!DOCTYPE html><html>...</html>", "pseudocode": "" },
        { "term": "CSS", "definition": "Language for the visual style of web pages.", "syntax": "selector { property: value; }", "pseudocode": "" },
        { "term": "JavaScript", "definition": "Language for adding interactivity to the browser.", "syntax": "document.getElementById('id')", "pseudocode": "" },
        { "term": "DOM", "definition": "Object model that represents the structure of HTML.", "syntax": "document.querySelector('selector')", "pseudocode": "" },
        { "term": "Responsive Design", "definition": "Design that adapts to different screen sizes.", "syntax": "@media (max-width: 600px) { ... }", "pseudocode": "" },
        { "term": "Bootstrap", "definition": "CSS framework for rapid responsive design.", "syntax": "<div class='container'>...</div>", "pseudocode": "" },
        { "term": "Fetch API / AJAX", "definition": "Asynchronous calls to the server from the client.", "syntax": "fetch('/api').then(res=>res.json())", "pseudocode": "" },
        { "term": "REST", "definition": "Architectural style for APIs using HTTP.", "syntax": "GET /resources, POST /resources", "pseudocode": "" },
        { "term": "GraphQL", "definition": "Query language for APIs that requests exactly what is needed.", "syntax": "query { users { id name } }", "pseudocode": "" },
        { "term": "HTTP (methods)", "definition": "Standard actions: GET, POST, PUT, DELETE, etc.", "syntax": "GET /users", "pseudocode": "" },
        { "term": "HTTP status codes", "definition": "Standard responses: 200 OK, 404 Not Found, 500 Server Error.", "syntax": "return 404", "pseudocode": "" },
        { "term": "Cookies", "definition": "Small pieces of data stored in the browser by the server.", "syntax": "Set-Cookie: name=value", "pseudocode": "" },
        { "term": "Session", "definition": "User data stored on the server between requests.", "syntax": "session['user'] = id", "pseudocode": "" },
        { "term": "JWT (JSON Web Token)", "definition": "A signed token for stateless authentication.", "syntax": "Authorization: Bearer <token>", "pseudocode": "" },
        { "term": "Authentication", "definition": "Verifying a user's identity.", "syntax": "POST /login", "pseudocode": "" },
        { "term": "Authorization", "definition": "Controlling what an authenticated user can do.", "syntax": "if user.role == 'admin' then ...", "pseudocode": "" },
        { "term": "CORS", "definition": "A policy that controls cross-origin requests.", "syntax": "Access-Control-Allow-Origin: *", "pseudocode": "" },
        { "term": "Middleware", "definition": "Intermediate code that processes requests before the controller.", "syntax": "app.use(middleware)", "pseudocode": "" },
        { "term": "Templating (e.g., Jinja, EJS)", "definition": "Generating dynamic HTML on the server.", "syntax": "{{ variable }}", "pseudocode": "" },
        { "term": "SPA (Single Page Application)", "definition": "A web app that loads a single page and updates content dynamically.", "syntax": "React / Vue / Angular", "pseudocode": "" },
        { "term": "CSR vs SSR", "definition": "Client-side rendering vs Server-side rendering.", "syntax": "", "pseudocode": "" },
        { "term": "CDN", "definition": "A distribution network for serving static resources quickly.", "syntax": "https://cdn.example.com/lib.js", "pseudocode": "" },
        { "term": "WebSocket", "definition": "Real-time, two-way communication between client and server.", "syntax": "new WebSocket(url)", "pseudocode": "" },
        { "term": "TLS / HTTPS", "definition": "A security layer for encrypted web connections.", "syntax": "https://...", "pseudocode": "" },
        { "term": "Accessibility (A11Y)", "definition": "Best practices to make the web usable by everyone.", "syntax": "role='button' aria-label='...'", "pseudocode": "" },
        { "term": "SEO (basic)", "definition": "Optimization for search engines.", "syntax": "<meta name='description' content='...'>", "pseudocode": "" },
        { "term": "PWA (Progressive Web App)", "definition": "Web apps with native capabilities (offline, installable).", "syntax": "serviceWorker.register('/sw.js')", "pseudocode": "" },
        { "term": "API RESTful versioning", "definition": "Versioning endpoints for compatibility.", "syntax": "/api/v1/users", "pseudocode": "" },
        { "term": "Rate limiting", "definition": "Request limits to protect the API.", "syntax": "limit to N requests/min", "pseudocode": "" },
        { "term": "Reverse proxy", "definition": "A server that acts as an intermediary for requests to the backend (e.g., Nginx).", "syntax": "", "pseudocode": "" }
    ],
    "Version Control and Collaboration": [
        { "term": "Git", "definition": "A distributed version control system.", "syntax": "git init", "pseudocode": "" },
        { "term": "Repository (repo)", "definition": "A storage for the code and its history.", "syntax": "git clone url", "pseudocode": "" },
        { "term": "Commit", "definition": "A record of changes with a message.", "syntax": "git commit -m 'message'", "pseudocode": "" },
        { "term": "Branch", "definition": "An independent line of development.", "syntax": "git branch feature-x", "pseudocode": "" },
        { "term": "Merge", "definition": "To join changes from one branch to another.", "syntax": "git merge feature-x", "pseudocode": "" },
        { "term": "Rebase", "definition": "To reapply commits on top of another base.", "syntax": "git rebase main", "pseudocode": "" },
        { "term": "Push", "definition": "To send commits to the remote repository.", "syntax": "git push origin branch", "pseudocode": "" },
        { "term": "Pull", "definition": "To fetch and merge changes from the remote.", "syntax": "git pull", "pseudocode": "" },
        { "term": "Fork", "definition": "A separate copy of a repo (mainly on GitHub).", "syntax": "", "pseudocode": "" },
        { "term": "Pull Request / Merge Request", "definition": "A proposal of changes for review and merging.", "syntax": "", "pseudocode": "" },
        { "term": "Conflict", "definition": "Incompatible changes that must be resolved manually.", "syntax": "git merge ... (conflict)", "pseudocode": "" },
        { "term": "Stash", "definition": "To save temporary changes without committing them.", "syntax": "git stash", "pseudocode": "" },
        { "term": "Checkout", "definition": "To switch to another branch or review a commit.", "syntax": "git checkout branch", "pseudocode": "" },
        { "term": "Tag", "definition": "A marker for versions/releases.", "syntax": "git tag v1.0", "pseudocode": "" },
        { "term": "Remote", "definition": "Remote repositories (origin, upstream).", "syntax": "git remote -v", "pseudocode": "" },
        { "term": "Git log", "definition": "Commit history.", "syntax": "git log", "pseudocode": "" },
        { "term": "Git diff", "definition": "Shows differences between versions.", "syntax": "git diff", "pseudocode": "" },
        { "term": "Cherry-pick", "definition": "To apply a specific commit to another branch.", "syntax": "git cherry-pick <sha>", "pseudocode": "" },
        { "term": "Revert", "definition": "To create a new commit that undoes another.", "syntax": "git revert <sha>", "pseudocode": "" },
        { "term": "Reset", "definition": "To move HEAD and optionally the index/working tree.", "syntax": "git reset --hard <sha>", "pseudocode": "" },
        { "term": ".gitignore", "definition": "A file to exclude files from the repo.", "syntax": "node_modules/", "pseudocode": "" },
        { "term": "Submodule", "definition": "A repo nested inside another repo.", "syntax": "git submodule add url", "pseudocode": "" },
        { "term": "CI / CD", "definition": "Continuous Integration and Continuous Delivery/Deployment.", "syntax": "github actions / pipelines", "pseudocode": "" },
        { "term": "Pipeline", "definition": "An automated set of build/test/deploy steps.", "syntax": ".github/workflows/*.yml", "pseudocode": "" },
        { "term": "Code review", "definition": "Peer review of code for quality.", "syntax": "comments on PR", "pseudocode": "" },
        { "term": "Issue tracking", "definition": "Management of tasks and bugs (issues, tickets).", "syntax": "", "pseudocode": "" },
        { "term": "Branching strategy (GitFlow)", "definition": "A convention for branches (feature, develop, release, hotfix).", "syntax": "", "pseudocode": "" },
        { "term": "Semantic versioning", "definition": "A versioning system MAJOR.MINOR.PATCH.", "syntax": "v1.2.3", "pseudocode": "" },
        { "term": "Code ownership", "definition": "People responsible for areas of the code.", "syntax": "", "pseudocode": "" },
        { "term": "Merge commit", "definition": "A commit that records the merging of branches.", "syntax": "", "pseudocode": "" }
    ],
    "Software Testing and Quality Assurance": [
        { "term": "Unit test", "definition": "A test that verifies the functionality of a single unit (function/module).", "syntax": "assert sum(2,3) == 5", "pseudocode": "" },
        { "term": "Integration test", "definition": "Verifies the interaction between several modules.", "syntax": "pytest tests/integration", "pseudocode": "" },
        { "term": "Functional test", "definition": "Validates that the system meets functional requirements.", "syntax": "selenium script", "pseudocode": "" },
        { "term": "Regression test", "definition": "Ensures that changes do not break existing functionalities.", "syntax": "complete test suite", "pseudocode": "" },
        { "term": "Acceptance test", "definition": "Final validation by the client/user.", "syntax": "UAT sessions", "pseudocode": "" },
        { "term": "Smoke test", "definition": "A quick test to validate that the app starts correctly.", "syntax": "smoke suite", "pseudocode": "" },
        { "term": "Sanity test", "definition": "A superficial check to see that a basic functionality works after changes.", "syntax": "", "pseudocode": "" },
        { "term": "TDD (Test Driven Development)", "definition": "Developing tests before the code.", "syntax": "Red-Green-Refactor", "pseudocode": "" },
        { "term": "BDD (Behavior Driven Development)", "definition": "Tests focused on behavior in natural language.", "syntax": "Given/When/Then", "pseudocode": "" },
        { "term": "Mocking", "definition": "Simulating dependencies in tests.", "syntax": "mock.object()", "pseudocode": "" },
        { "term": "Coverage", "definition": "Percentage of code covered by tests.", "syntax": "coverage run -m pytest", "pseudocode": "" },
        { "term": "Load testing", "definition": "Evaluating performance under expected load.", "syntax": "k6 run script.js", "pseudocode": "" },
        { "term": "Stress testing", "definition": "Evaluating behavior under extreme conditions.", "syntax": "", "pseudocode": "" },
        { "term": "Performance testing", "definition": "Measuring speed, latency, and throughput.", "syntax": "ab -n 1000 -c 50", "pseudocode": "" },
        { "term": "Security testing", "definition": "Detecting vulnerabilities in the application.", "syntax": "zap scan", "pseudocode": "" },
        { "term": "SAST", "definition": "Static analysis of code to find vulnerabilities.", "syntax": "sonarqube analysis", "pseudocode": "" },
        { "term": "DAST", "definition": "Dynamic analysis against a running application.", "syntax": "zap active scan", "pseudocode": "" },
        { "term": "Linting", "definition": "Tools that detect style/bug issues (e.g., ESLint, Flake8).", "syntax": "eslint src/", "pseudocode": "" },
        { "term": "Static analysis", "definition": "Reviewing code without running the application.", "syntax": "sonar-scanner", "pseudocode": "" },
        { "term": "Usability testing", "definition": "Validating user experience and ease of use by real users.", "syntax": "", "pseudocode": "" },
        { "term": "Accessibility testing", "definition": "Ensuring the app is usable by people with disabilities.", "syntax": "axe-core", "pseudocode": "" },
        { "term": "CI (Continuous Integration)", "definition": "Automating builds and tests when code is pushed.", "syntax": ".github/workflows/ci.yml", "pseudocode": "" },
        { "term": "CD (Continuous Delivery/Deployment)", "definition": "Automating deployment to environments.", "syntax": ".github/workflows/cd.yml", "pseudocode": "" },
        { "term": "Test pipeline", "definition": "An automated sequence of steps: build/test/deploy.", "syntax": "pipeline { stages { ... } }", "pseudocode": "" },
        { "term": "Bug / Defect", "definition": "Behavior that does not meet the requirements.", "syntax": "", "pseudocode": "" },
        { "term": "Severity vs Priority", "definition": "Severity = technical impact; Priority = when to fix it.", "syntax": "", "pseudocode": "" },
        { "term": "Bug report", "definition": "A document describing the failure and steps to reproduce it.", "syntax": "", "pseudocode": "" },
        { "term": "Triage", "definition": "Classifying and prioritizing received bugs.", "syntax": "", "pseudocode": "" },
        { "term": "Defect life cycle", "definition": "The states a bug goes through (new, open, fixed, closed).", "syntax": "", "pseudocode": "" },
        { "term": "Canary release", "definition": "Deploying changes to a small percentage of users for validation.", "syntax": "", "pseudocode": "" }
    ]
}

# --- TRANSFORMATION ---
# 2. We create the flat list that your app.py expects, adding the category to each card.
# This is the variable that is actually imported in app.py.

tarjetas = []
for categoria, lista_de_tarjetas in tarjetas_por_categoria.items():
    for tarjeta in lista_de_tarjetas:
        tarjeta['categoria'] = categoria  # We add the "category" key to each dictionary.
        tarjetas.append(tarjeta)