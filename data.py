# data.py

# 1. Dictionary with all the information, grouped by categories (Python syntax).
cards_by_category = {
    "Programming and Algorithms": [
        { "term": "Variable", "definition": "A memory space for storing a changeable value.", "sintaxis": "let x = 5;", "pseudocode": "Define x <- 5" },
        { "term": "Constant", "definition": "A fixed value that does not change during execution.", "sintaxis": "const PI = 3.14;", "pseudocode": "Constant PI <- 3.14" },
        { "term": "Integer Data Type", "definition": "A number without decimals.", "sintaxis": "int n = 10;", "pseudocode": "Define n as Integer" },
        { "term": "Float Data Type", "definition": "A number with a decimal part.", "sintaxis": "float f = 3.5;", "pseudocode": "Define f as Real" },
        { "term": "String", "definition": "A sequence of characters.", "sintaxis": "string s = \"hello\";", "pseudocode": "Define s as Text" },
        { "term": "Boolean", "definition": "A true or false value.", "sintaxis": "bool flag = true;", "pseudocode": "Define flag as Boolean" },
        { "term": "If Conditional", "definition": "Executes code if a condition is true.", "sintaxis": "if (a > b) { ... }", "pseudocode": "If a > b Then ... EndIf" },
        { "term": "If-Else Conditional", "definition": "Alternates between two blocks of code based on a condition.", "sintaxis": "if (c) { ... } else { ... }", "pseudocode": "If c Then ... Else ... EndIf" },
        { "term": "Switch/Case Structure", "definition": "Selects an action based on the value of an expression.", "sintaxis": "switch(x) { case 1: ...; break; }", "pseudocode": "According to x Do Case1: ...; Case2: ..." },
        { "term": "For Loop", "definition": "Repeats instructions a specific number of times.", "sintaxis": "for (i=0; i<n; i++) { ... }", "pseudocode": "For i = 0 To n-1 Do ... EndFor" },
        { "term": "While Loop", "definition": "Repeats instructions as long as a condition is met.", "sintaxis": "while (cond) { ... }", "pseudocode": "While cond Do ... EndWhile" },
        { "term": "Do-While Loop", "definition": "Executes at least once and then repeats if the condition is true.", "sintaxis": "do { ... } while (cond);", "pseudocode": "Repeat ... Until Not cond" },
        { "term": "Break", "definition": "Interrupts the execution of a loop.", "sintaxis": "if (x==-1) break;", "pseudocode": "If x == -1 Then ExitLoop" },
        { "term": "Continue", "definition": "Skips to the next iteration of the loop.", "sintaxis": "if (x<0) continue;", "pseudocode": "If x < 0 Then Continue" },
        { "term": "Function / Method", "definition": "A reusable block of code that performs a task.", "sintaxis": "function sum(a,b) { return a+b; }", "pseudocode": "Function sum(a,b) Return a+b EndFunction" },
        { "term": "Parameters and Arguments", "definition": "Input values for a function (parameters) and their concrete values (arguments).", "sintaxis": "sum(2,3)  // arguments", "pseudocode": "Call sum(2,3)" },
        { "term": "Return Value", "definition": "The result that a function returns.", "sintaxis": "return result;", "pseudocode": "Return result" },
        { "term": "Recursion", "definition": "A function that calls itself to solve a problem.", "sintaxis": "function fact(n) { if (n<=1) return 1; return n*fact(n-1); }", "pseudocode": "Function fact(n) If n<=1 Return 1 Else Return n * fact(n-1) EndFunction" },
        { "term": "Array", "definition": "An indexed collection of elements of the same type.", "sintaxis": "int a[5] = {1,2,3,4,5};", "pseudocode": "Array a of size 5" },
        { "term": "List", "definition": "An ordered and dynamic collection of elements.", "sintaxis": "list = [1,2,3]", "pseudocode": "List <- [1,2,3]" },
        { "term": "Stack", "definition": "A LIFO (Last-In, First-Out) structure.", "sintaxis": "push(x); pop();", "pseudocode": "Push(x) / Pop()" },
        { "term": "Queue", "definition": "A FIFO (First-In, First-Out) structure.", "sintaxis": "enqueue(x); dequeue();", "pseudocode": "Enqueue(x) / Dequeue()" },
        { "term": "Linked List", "definition": "A dynamic structure where each element points to the next.", "sintaxis": "node.next = other;", "pseudocode": "node.next <- other" },
        { "term": "Binary Tree", "definition": "A hierarchical structure with nodes, each having up to two children.", "sintaxis": "node.left, node.right", "pseudocode": "Visit node; Visit left child; Visit right child" },
        { "term": "Graph", "definition": "A set of nodes connected by edges.", "sintaxis": "adjList[node] = [v1, v2]", "pseudocode": "For each neighbor Do ..." },
        { "term": "Linear Search", "definition": "Searches sequentially until the element is found.", "sintaxis": "for i in arr: if arr[i]==x: return i", "pseudocode": "For each element If element == x Return index EndFor" },
        { "term": "Binary Search", "definition": "Searches a sorted list by repeatedly dividing the search interval in half.", "sintaxis": "while low<=high: mid=(low+high)//2", "pseudocode": "Initialize low, high; While low<=high Do mid=(low+high)/2; compare; adjust bounds" },
        { "term": "Bubble Sort", "definition": "Repeatedly swaps adjacent elements if they are in the wrong order.", "sintaxis": "for i for j if a[j]>a[j+1] swap", "pseudocode": "Repeat n times Swap unordered pairs" },
        { "term": "Insertion Sort", "definition": "Builds the final sorted list one item at a time.", "sintaxis": "for i in 1..n insert a[i]", "pseudocode": "For i from 2 to n Insert a[i] into sorted sublist" },
        { "term": "Merge Sort", "definition": "A divide and conquer algorithm.", "sintaxis": "mergeSort(arr): split, merge", "pseudocode": "If size <=1 Return; divide; mergeSort(left); mergeSort(right); merge" },
        { "term": "Time Complexity O(n)", "definition": "Linear time with respect to the input size.", "sintaxis": "e.g., for(i=0;i<n;i++)", "pseudocode": "" },
        { "term": "Time Complexity O(n log n)", "definition": "Example: efficient sorting algorithms.", "sintaxis": "merge sort, quick sort", "pseudocode": "" },
        { "term": "Hash Table / HashMap", "definition": "A key-value structure with average O(1) access time.", "sintaxis": "map['key'] = value", "pseudocode": "" }
    ],
    "Databases": [
        { "term": "Database", "definition": "A system for storing and organizing data.", "sintaxis": "CREATE DATABASE myDB;", "pseudocode": "" },
        { "term": "Table", "definition": "A data structure with rows and columns.", "sintaxis": "CREATE TABLE users(id INT, name VARCHAR(50));", "pseudocode": "" },
        { "term": "Record / Row", "definition": "A single entry in a table.", "sintaxis": "INSERT INTO table VALUES (...);", "pseudocode": "" },
        { "term": "Column", "definition": "An attribute or field of a table.", "sintaxis": "name VARCHAR(50)", "pseudocode": "" },
        { "term": "Primary Key", "definition": "A unique identifier for each record.", "sintaxis": "id INT PRIMARY KEY", "pseudocode": "" },
        { "term": "Foreign Key", "definition": "A reference to a primary key in another table.", "sintaxis": "FOREIGN KEY (fk) REFERENCES other(id)", "pseudocode": "" },
        { "term": "SELECT Query", "definition": "Retrieves data from the database.", "sintaxis": "SELECT col FROM table WHERE cond;", "pseudocode": "" },
        { "term": "INSERT", "definition": "Inserts new records into a table.", "sintaxis": "INSERT INTO table(col) VALUES(val);", "pseudocode": "" },
        { "term": "UPDATE", "definition": "Modifies existing records.", "sintaxis": "UPDATE table SET col = val WHERE cond;", "pseudocode": "" },
        { "term": "DELETE", "definition": "Removes records.", "sintaxis": "DELETE FROM table WHERE cond;", "pseudocode": "" },
        { "term": "JOIN (INNER JOIN)", "definition": "Combines rows from two or more tables based on a related column.", "sintaxis": "SELECT * FROM a INNER JOIN b ON a.id=b.a_id;", "pseudocode": "" },
        { "term": "LEFT JOIN", "definition": "Returns all records from the left table, and the matched records from the right table.", "sintaxis": "SELECT * FROM a LEFT JOIN b ON ...;", "pseudocode": "" },
        { "term": "RIGHT JOIN", "definition": "Returns all records from the right table, and the matched records from the left table.", "sintaxis": "SELECT * FROM a RIGHT JOIN b ON ...;", "pseudocode": "" },
        { "term": "FULL JOIN", "definition": "Returns all records when there is a match in either left or right table.", "sintaxis": "SELECT * FROM a FULL JOIN b ON ...;", "pseudocode": "" },
        { "term": "GROUP BY", "definition": "Groups rows for aggregation functions.", "sintaxis": "SELECT col, COUNT(*) FROM table GROUP BY col;", "pseudocode": "" },
        { "term": "HAVING", "definition": "Filters groups (similar to WHERE but for aggregates).", "sintaxis": "SELECT ... GROUP BY ... HAVING COUNT(*)>1;", "pseudocode": "" },
        { "term": "ORDER BY", "definition": "Sorts the result set.", "sintaxis": "SELECT * FROM table ORDER BY col DESC;", "pseudocode": "" },
        { "term": "Index", "definition": "A structure that improves the speed of data retrieval operations.", "sintaxis": "CREATE INDEX idx ON table(col);", "pseudocode": "" },
        { "term": "Transaction", "definition": "A sequence of operations performed as a single logical unit of work.", "sintaxis": "BEGIN; ... COMMIT;", "pseudocode": "" },
        { "term": "COMMIT / ROLLBACK", "definition": "To confirm or undo a transaction.", "sintaxis": "COMMIT;", "pseudocode": "" },
        { "term": "Normalization", "definition": "The process of organizing columns and tables to minimize data redundancy.", "sintaxis": "1NF, 2NF, 3NF", "pseudocode": "" },
        { "term": "Stored Procedure", "definition": "A routine stored in the database.", "sintaxis": "CREATE PROCEDURE name AS BEGIN ... END;", "pseudocode": "" },
        { "term": "Trigger", "definition": "An action that is automatically performed in response to database events.", "sintaxis": "CREATE TRIGGER ... AFTER INSERT ...", "pseudocode": "" },
        { "term": "View", "definition": "A stored query that acts as a virtual table.", "sintaxis": "CREATE VIEW v AS SELECT ...;", "pseudocode": "" },
        { "term": "ACID", "definition": "Properties of transactions: Atomicity, Consistency, Isolation, Durability.", "sintaxis": "", "pseudocode": "" },
        { "term": "Shard / Sharding", "definition": "Horizontal partitioning of data for scalability.", "sintaxis": "", "pseudocode": "" },
        { "term": "Replication", "definition": "Copying data between servers for availability.", "sintaxis": "", "pseudocode": "" },
        { "term": "Backup / Restore", "definition": "Data backup and restoration.", "sintaxis": "pg_dump / psql", "pseudocode": "" },
        { "term": "NoSQL", "definition": "Non-relational databases (document, key-value, column).", "sintaxis": "db.collection.find()", "pseudocode": "" }
    ],
    "Web Development (Frontend and Backend)": [
        { "term": "HTML", "definition": "Markup language for structuring web pages.", "sintaxis": "<!DOCTYPE html><html>...</html>", "pseudocode": "" },
        { "term": "CSS", "definition": "Language for the visual style of web pages.", "sintaxis": "selector { property: value; }", "pseudocode": "" },
        { "term": "JavaScript", "definition": "Language for adding interactivity to the browser.", "sintaxis": "document.getElementById('id')", "pseudocode": "" },
        { "term": "DOM", "definition": "Object model representing the structure of the HTML.", "sintaxis": "document.querySelector('selector')", "pseudocode": "" },
        { "term": "Responsive Design", "definition": "Design that adapts to different screen sizes.", "sintaxis": "@media (max-width: 600px) { ... }", "pseudocode": "" },
        { "term": "Bootstrap", "definition": "CSS framework for rapid responsive design.", "sintaxis": "<div class='container'>...</div>", "pseudocode": "" },
        { "term": "Fetch API / AJAX", "definition": "Asynchronous calls to the server from the client.", "sintaxis": "fetch('/api').then(res=>res.json())", "pseudocode": "" },
        { "term": "REST", "definition": "Architectural style for APIs using HTTP.", "sintaxis": "GET /resources, POST /resources", "pseudocode": "" },
        { "term": "GraphQL", "definition": "A query language for APIs that requests exactly what is needed.", "sintaxis": "query { users { id name } }", "pseudocode": "" },
        { "term": "HTTP (methods)", "definition": "Standard actions: GET, POST, PUT, DELETE, etc.", "sintaxis": "GET /users", "pseudocode": "" },
        { "term": "HTTP Status Codes", "definition": "Standard responses: 200 OK, 404 Not Found, 500 Server Error.", "sintaxis": "return 404", "pseudocode": "" },
        { "term": "Cookies", "definition": "Small pieces of data stored in the browser by the server.", "sintaxis": "Set-Cookie: name=value", "pseudocode": "" },
        { "term": "Session", "definition": "User data stored on the server between requests.", "sintaxis": "session['user'] = id", "pseudocode": "" },
        { "term": "JWT (JSON Web Token)", "definition": "A signed token for stateless authentication.", "sintaxis": "Authorization: Bearer <token>", "pseudocode": "" },
        { "term": "Authentication", "definition": "Verifying a user's identity.", "sintaxis": "POST /login", "pseudocode": "" },
        { "term": "Authorization", "definition": "Controlling what an authenticated user can do.", "sintaxis": "if user.role == 'admin' then ...", "pseudocode": "" },
        { "term": "CORS", "definition": "A policy that controls cross-origin requests.", "sintaxis": "Access-Control-Allow-Origin: *", "pseudocode": "" },
        { "term": "Middleware", "definition": "Intermediate code that processes requests before the controller.", "sintaxis": "app.use(middleware)", "pseudocode": "" },
        { "term": "Templating (e.g., Jinja, EJS)", "definition": "Generating dynamic HTML on the server.", "sintaxis": "{{ variable }}", "pseudocode": "" },
        { "term": "SPA (Single Page Application)", "definition": "A web application that loads a single page and updates content dynamically.", "sintaxis": "React / Vue / Angular", "pseudocode": "" },
        { "term": "CSR vs SSR", "definition": "Client-side rendering vs Server-side rendering.", "sintaxis": "", "pseudocode": "" },
        { "term": "CDN", "definition": "A distribution network for serving static resources quickly.", "sintaxis": "https://cdn.example.com/lib.js", "pseudocode": "" },
        { "term": "WebSocket", "definition": "Bidirectional, real-time client-server communication.", "sintaxis": "new WebSocket(url)", "pseudocode": "" },
        { "term": "TLS / HTTPS", "definition": "A security layer for encrypted web connections.", "sintaxis": "https://...", "pseudocode": "" },
        { "term": "Accessibility (A11Y)", "definition": "Best practices to make the web usable by everyone.", "sintaxis": "role='button' aria-label='...'", "pseudocode": "" },
        { "term": "SEO (basics)", "definition": "Optimization for search engines.", "sintaxis": "<meta name='description' content='...'>", "pseudocode": "" },
        { "term": "PWA (Progressive Web App)", "definition": "Web apps with native capabilities (offline, installable).", "sintaxis": "serviceWorker.register('/sw.js')", "pseudocode": "" },
        { "term": "API RESTful versioning", "definition": "Versioning endpoints for compatibility.", "sintaxis": "/api/v1/users", "pseudocode": "" },
        { "term": "Rate limiting", "definition": "Request limits to protect the API.", "sintaxis": "limit to N requests/min", "pseudocode": "" },
        { "term": "Reverse proxy", "definition": "A server that acts as an intermediary for requests to the backend (e.g., Nginx).", "sintaxis": "", "pseudocode": "" }
    ],
    "Version Control and Collaboration": [
        { "term": "Git", "definition": "A distributed version control system.", "sintaxis": "git init", "pseudocode": "" },
        { "term": "Repository (repo)", "definition": "Storage for the code and its history.", "sintaxis": "git clone url", "pseudocode": "" },
        { "term": "Commit", "definition": "A record of changes with a message.", "sintaxis": "git commit -m 'message'", "pseudocode": "" },
        { "term": "Branch", "definition": "An independent line of development.", "sintaxis": "git branch feature-x", "pseudocode": "" },
        { "term": "Merge", "definition": "To join changes from one branch into another.", "sintaxis": "git merge feature-x", "pseudocode": "" },
        { "term": "Rebase", "definition": "To reapply commits on top of another base.", "sintaxis": "git rebase main", "pseudocode": "" },
        { "term": "Push", "definition": "To send commits to the remote repository.", "sintaxis": "git push origin branch", "pseudocode": "" },
        { "term": "Pull", "definition": "To fetch and merge changes from the remote.", "sintaxis": "git pull", "pseudocode": "" },
        { "term": "Fork", "definition": "A separate copy of a repo (mainly on GitHub).", "sintaxis": "", "pseudocode": "" },
        { "term": "Pull Request / Merge Request", "definition": "A proposal of changes for review and merging.", "sintaxis": "", "pseudocode": "" },
        { "term": "Conflict", "definition": "Incompatible changes that must be resolved manually.", "sintaxis": "git merge ... (conflict)", "pseudocode": "" },
        { "term": "Stash", "definition": "To save temporary changes without committing them.", "sintaxis": "git stash", "pseudocode": "" },
        { "term": "Checkout", "definition": "To switch to another branch or review a commit.", "sintaxis": "git checkout branch", "pseudocode": "" },
        { "term": "Tag", "definition": "A marker for versions/releases.", "sintaxis": "git tag v1.0", "pseudocode": "" },
        { "term": "Remote", "definition": "Remote repositories (origin, upstream).", "sintaxis": "git remote -v", "pseudocode": "" },
        { "term": "Git log", "definition": "History of commits.", "sintaxis": "git log", "pseudocode": "" },
        { "term": "Git diff", "definition": "Shows differences between versions.", "sintaxis": "git diff", "pseudocode": "" },
        { "term": "Cherry-pick", "definition": "To apply a specific commit to another branch.", "sintaxis": "git cherry-pick <sha>", "pseudocode": "" },
        { "term": "Revert", "definition": "To create a new commit that undoes another.", "sintaxis": "git revert <sha>", "pseudocode": "" },
        { "term": "Reset", "definition": "To move HEAD and optionally the index/working tree.", "sintaxis": "git reset --hard <sha>", "pseudocode": "" },
        { "term": ".gitignore", "definition": "A file to exclude files from the repo.", "sintaxis": "node_modules/", "pseudocode": "" },
        { "term": "Submodule", "definition": "A repo nested inside another repo.", "sintaxis": "git submodule add url", "pseudocode": "" },
        { "term": "CI / CD", "definition": "Continuous Integration and Continuous Delivery/Deployment.", "sintaxis": "github actions / pipelines", "pseudocode": "" },
        { "term": "Pipeline", "definition": "A set of automated build/test/deploy steps.", "sintaxis": ".github/workflows/*.yml", "pseudocode": "" },
        { "term": "Code review", "definition": "Peer review of code for quality.", "sintaxis": "comments on PR", "pseudocode": "" },
        { "term": "Issue tracking", "definition": "Management of tasks and bugs (issues, tickets).", "sintaxis": "", "pseudocode": "" },
        { "term": "Branching strategy (GitFlow)", "definition": "A convention for branches (feature, develop, release, hotfix).", "sintaxis": "", "pseudocode": "" },
        { "term": "Semantic versioning", "definition": "A versioning system: MAJOR.MINOR.PATCH.", "sintaxis": "v1.2.3", "pseudocode": "" },
        { "term": "Code ownership", "definition": "Those responsible for areas of the code.", "sintaxis": "", "pseudocode": "" },
        { "term": "Merge commit", "definition": "A commit that records the joining of branches.", "sintaxis": "", "pseudocode": "" }
    ],
    "Software Testing and Quality Assurance": [
        { "term": "Unit Test", "definition": "A test that verifies the functionality of a single unit (function/module).", "sintaxis": "assert sum(2,3) == 5", "pseudocode": "" },
        { "term": "Integration Test", "definition": "Verifies the interaction between several modules.", "sintaxis": "pytest tests/integration", "pseudocode": "" },
        { "term": "Functional Test", "definition": "Validates that the system meets functional requirements.", "sintaxis": "selenium script", "pseudocode": "" },
        { "term": "Regression Test", "definition": "Ensures that new changes do not break existing functionality.", "sintaxis": "test suite complete", "pseudocode": "" },
        { "term": "Acceptance Test", "definition": "Final validation by the client/user.", "sintaxis": "UAT sessions", "pseudocode": "" },
        { "term": "Smoke Test", "definition": "A quick test to validate that the application starts correctly.", "sintaxis": "smoke suite", "pseudocode": "" },
        { "term": "Sanity Test", "definition": "A brief check to see if a basic functionality works after changes.", "sintaxis": "", "pseudocode": "" },
        { "term": "TDD (Test Driven Development)", "definition": "Developing tests before the code.", "sintaxis": "Red-Green-Refactor", "pseudocode": "" },
        { "term": "BDD (Behavior Driven Development)", "definition": "Tests focused on behavior in natural language.", "sintaxis": "Given/When/Then", "pseudocode": "" },
        { "term": "Mocking", "definition": "Simulating dependencies in tests.", "sintaxis": "mock.object()", "pseudocode": "" },
        { "term": "Code Coverage", "definition": "The percentage of code covered by tests.", "sintaxis": "coverage run -m pytest", "pseudocode": "" },
        { "term": "Load Testing", "definition": "Evaluating performance under expected load.", "sintaxis": "k6 run script.js", "pseudocode": "" },
        { "term": "Stress Testing", "definition": "Evaluating behavior under extreme conditions.", "sintaxis": "", "pseudocode": "" },
        { "term": "Performance Testing", "definition": "Measuring speed, latency, and throughput.", "sintaxis": "ab -n 1000 -c 50", "pseudocode": "" },
        { "term": "Security Testing", "definition": "Detecting vulnerabilities in the application.", "sintaxis": "zap scan", "pseudocode": "" },
        { "term": "SAST", "definition": "Static analysis of code to find vulnerabilities.", "sintaxis": "sonarqube analysis", "pseudocode": "" },
        { "term": "DAST", "definition": "Dynamic analysis against a running application.", "sintaxis": "zap active scan", "pseudocode": "" },
        { "term": "Linting", "definition": "Tools that detect style/bug issues (e.g., ESLint, Flake8).", "sintaxis": "eslint src/", "pseudocode": "" },
        { "term": "Static Analysis", "definition": "Reviewing code without executing the application.", "sintaxis": "sonar-scanner", "pseudocode": "" },
        { "term": "Usability Testing", "definition": "Validating user experience and ease of use by real users.", "sintaxis": "", "pseudocode": "" },
        { "term": "Accessibility Testing", "definition": "Ensuring the app is usable by people with disabilities.", "sintaxis": "axe-core", "pseudocode": "" },
        { "term": "CI (Continuous Integration)", "definition": "Automating build and tests on code push.", "sintaxis": ".github/workflows/ci.yml", "pseudocode": "" },
        { "term": "CD (Continuous Delivery/Deployment)", "definition": "Automating deployment to environments.", "sintaxis": ".github/workflows/cd.yml", "pseudocode": "" },
        { "term": "Test Pipeline", "definition": "An automated sequence of steps: build/test/deploy.", "sintaxis": "pipeline { stages { ... } }", "pseudocode": "" },
        { "term": "Bug / Defect", "definition": "Behavior that does not meet requirements.", "sintaxis": "", "pseudocode": "" },
        { "term": "Severity vs. Priority", "definition": "Severity = technical impact; Priority = when to fix it.", "sintaxis": "", "pseudocode": "" },
        { "term": "Bug Report", "definition": "A document describing a failure and steps to reproduce it.", "sintaxis": "", "pseudocode": "" },
        { "term": "Triage", "definition": "Classifying and prioritizing incoming bugs.", "sintaxis": "", "pseudocode": "" },
        { "term": "Defect Life Cycle", "definition": "The states a bug goes through (new, open, fixed, closed).", "sintaxis": "", "pseudocode": "" },
        { "term": "Canary Release", "definition": "Deploying changes to a small percentage of users for validation.", "sintaxis": "", "pseudocode": "" }
    ]
}

# --- TRANSFORMATION ---
# 2. We create the flat list that your app.py expects, adding the category to each card.
# This is the variable that is actually imported in app.py.

# NOTE: The variable name `tarjetas` is kept for compatibility with the existing `app.py`
tarjetas = []
# NOTE: The variable name `tarjetas_por_categoria` is changed to `cards_by_category`
for category, card_list in cards_by_category.items():
    for card in card_list:
        card['categoria'] = category  # We add the "category" key to each dictionary.
        tarjetas.append(card)